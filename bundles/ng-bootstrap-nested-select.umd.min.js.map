{"version":3,"sources":["ng://ng-bootstrap-nested-select/lib/ng-bootstrap-nested-select.component.ts","ng://ng-bootstrap-nested-select/lib/ng-bootstrap-nested-select.module.ts"],"names":["KEY_CODE","this","filter","fields","field","scroll","top","selectAll","label","collapsed","clear","strict","actions","required","indexedOptions","numberInput","matchRating","emptyText","popoverTitle","NgBootstrapNestedSelectComponent","cb","ngbConfig","disable","invalid","_options","settings","NgBootstrapNestedSelectDefaultSetting","_disabled","selectExpand","selected","EventEmitter","actionSelected","_optionsFiltered","_searchTerm","_selected","filterOn","autoClose","Object","defineProperty","prototype","options","_this","setOptions","setTimeout","resetSelected","defautOption","tslib","__assign","name","validate","bool","ngOnInit","defaultSettings","key","markForCheck","keyEvent","event","keyCode","UP_ARROW","DOWN_ARROW","arrowOption","ENTER","selectOption","hasOptions","op","length","forEach","opt","option","toggle","selectWithOptions","stopPropagation","preventDefault","emit","nestedDropRef","close","detectChanges","selecWithOptions","keys","filterOptions","searchTerm","open","slice","found","index","optTerm","search","RegExp","similar","similarity.compareTwoStrings","indexOf","match","push","sort","a","b","direction","moveSelected","selectAction","action","showFilter","filterInputRef","nativeElement","focus","hideFilter","objCopy","ChangeDetectorRef","NgbDropdownConfig","tslib_1.__decorate","HostBinding","ViewChild","static","Input","Output","HostListener","__decorate","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","NgBootstrapNestedSelectModule","NgModule","declarations","imports","CommonModule","FormsModule","NgbPopoverModule","NgbDropdownModule","exports"],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnInit,\n  Output,\n  ViewChild\n} from '@angular/core';\nimport {NgbDropdown, NgbDropdownConfig} from '@ng-bootstrap/ng-bootstrap';\nimport * as similarity from 'string-similarity';\n\nexport enum KEY_CODE {\n  ENTER = 13,\n  UP_ARROW = 38,\n  DOWN_ARROW = 40\n}\n\nexport interface NgBootstrapNestedSelectAction {\n  id: any;\n  label: string;\n}\n\nexport interface NgBootstrapNestedSelectSettings {\n  filter: { fields: any[] };\n  field: string;\n  scroll: boolean;\n  top: boolean;\n  selectAll: boolean;\n  label: string;\n  collapsed: boolean;\n  clear: boolean|string;\n  strict: boolean;\n  actions: string;\n  required: boolean;\n  indexedOptions: boolean;\n  numberInput: boolean;\n  matchRating: number;\n  emptyText: string;\n  popoverTitle: boolean|string;\n}\n\nexport class NgBootstrapNestedSelectDefaultSetting implements NgBootstrapNestedSelectSettings {\n  filter = { fields: ['name'] };\n  field = 'options';\n  scroll = true;\n  top = false;\n  selectAll = false;\n  label = 'name';\n  collapsed = false;\n  clear = 'Clear';\n  strict = true;\n  actions = null;\n  required = false;\n  indexedOptions = false;\n  numberInput = false;\n  matchRating = .4;\n  emptyText = 'No Options Available';\n  popoverTitle = 'Details:';\n}\n\n@Component({\n  selector: 'nested-select',\n  templateUrl: './ng-bootstrap-nested-select.component.html',\n  styleUrls: ['./ng-bootstrap-nested-select.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgBootstrapNestedSelectComponent implements OnInit {\n  @HostBinding('class.disabled') disable = false;\n  @HostBinding('class.required') required = false;\n  @HostBinding('class.invalid') invalid = true;\n  @ViewChild('filterInput', {static: false}) private filterInputRef: ElementRef;\n  @ViewChild('nestedDrop', {static: false}) private nestedDropRef: NgbDropdown;\n\n  // Local list of options\n  _options: any[] = [];\n\n  // List of options to display in the dropdown\n  @Input() set options(options) {\n    this.setOptions(options);\n    // resetSelected needs to wait for the settings var to populate, so use setTimeout to delay execution.\n    setTimeout(() => {\n      this.resetSelected(this._options);\n    }, 500);\n  }\n\n  // Default option to be set\n  @Input() set default(defautOption) {\n    if(typeof defautOption === 'object') {\n      this._selected = {...defautOption};\n    } else {\n      this._selected = {\n        name: defautOption,\n        selected: true\n      };\n    }\n    if(defautOption) this.filterOn = false;\n    this.validate();\n  }\n\n  // Settings to control component\n  @Input() settings: NgBootstrapNestedSelectSettings = new NgBootstrapNestedSelectDefaultSetting();\n  _disabled: boolean = false;\n\n  // Disabled the select box\n  @Input() set disabled(bool) {\n    if(bool) this.disable = true;\n    else this.disable = false;\n    this._disabled = bool;\n  }\n\n\n  // Select Expand of list\n  @Input() selectExpand:boolean = false;\n\n\n  // Array of action buttons/links to add to select box\n  @Input() actions: NgBootstrapNestedSelectAction[] = [];\n\n  // Emit selected value when selected\n  @Output() selected: EventEmitter<any> = new EventEmitter();\n\n  // Emit action value when action is selected\n  @Output() actionSelected: EventEmitter<any> = new EventEmitter();\n\n  // Array of filted options\n  _optionsFiltered: any[] = [];\n\n  // The filter string to search through options\n  _searchTerm: string = '';\n\n  // The selected option\n  _selected: any = {};\n\n  public filterOn: boolean = true;\n\n  constructor(\n    private cb: ChangeDetectorRef,\n    private ngbConfig: NgbDropdownConfig\n  ) {\n    this.ngbConfig.autoClose = 'outside';\n  }\n\n  /**\n   * Init the default settings if they aren't provided in the settings object\n   */\n  ngOnInit() {\n    let defaultSettings = new NgBootstrapNestedSelectDefaultSetting();\n    for(let key in defaultSettings) {\n      if(!this.settings[key] && this.settings[key] !== false) this.settings[key] = defaultSettings[key];\n    }\n\n    // Add 'required' class\n    if(this.settings.required) {\n      this.required = true;\n      this.validate();\n    }\n\n    this.cb.markForCheck();\n  }\n\n  /**\n   * Handle a keyboard event when toggle through the options list\n   * @param {KeyboardEvent} event\n   */\n  @HostListener('window:keyup', ['$event'])\n  keyEvent(event: KeyboardEvent) {\n    switch(event.keyCode) {\n      case KEY_CODE.UP_ARROW:\n      case KEY_CODE.DOWN_ARROW:\n        this.arrowOption(event.keyCode);\n        break;\n      case KEY_CODE.ENTER:\n        this.selectOption(null, this._selected);\n        break;\n    }\n  }\n\n  /**\n   * Check if we have any options to select from\n   * @returns {boolean}\n   */\n  hasOptions() {\n    return this._options.filter((op) => {\n      if(op[this.settings.label] && op[this.settings.label] !== '') return true;\n    }).length > 0;\n  }\n\n  /**\n   * Resursively reset the \"selected\" flag for every option\n   * @param options\n   */\n  resetSelected(options: any[] = []) {\n    options.forEach(opt => {\n      opt.selected = false;\n      opt.collapsed = false;\n      // Check if this options has child options\n      if(this.settings && opt[this.settings.field] && opt[this.settings.field].length > 0) {\n        this.resetSelected(opt[this.settings.field]);\n      }\n    });\n  }\n\n  /**\n   * Select a value from the options and emit output\n   * @param {MouseEvent|null} event\n   * @param {any=null} option\n   * @param {boolean=false} toggle\n   */\n  selectOption(event: (MouseEvent|null), option: any = null, toggle: boolean = false, selectWithOptions = false) {\n    //console.log(selectWithOptions)\n    if(!option) {\n      option = {selected: true};\n      option[this.settings.label] = event;\n    }\n\n    if(toggle || (option[this.settings.field] && option[this.settings.field].length && !this.settings.selectAll && !selectWithOptions)) {\n      option.selected = !option.selected;\n      event.stopPropagation();\n      event.preventDefault();\n    } else {\n      this._selected = {...option};\n      this._searchTerm = this._selected[this.settings.label];\n\n      if(this.settings.indexedOptions) this.selected.emit(option[this.settings.label]);\n      else this.selected.emit(option);\n\n      if(!this.settings.selectAll) this.filterOn = false;\n      this.nestedDropRef.close();\n    }\n\n    this.validate();\n\n    this.cb.detectChanges();\n  }\n\n  selecWithOptions(event: (MouseEvent|null), option: any = null){\n    this.selectOption(event,option, false,this.selectExpand)\n  }\n  /**\n   * Check if we have a value selected\n   */\n  validate() {\n    if(Object.keys(this._selected).length > 0) this.invalid = false;\n    else this.invalid = true;\n  }\n\n  /**\n   * Resursive filter the list of options based on the kyeboard input\n   * @param {string} searchTerm - The text to search for\n   * @param {any[]} options - The options array to search through\n   * @returns {number} found - value is > 1 if match is found, < 0 if no match\n   */\n  filterOptions(searchTerm: string = null, options: any[] = []) {\n    this.nestedDropRef.open();\n    if(this._searchTerm.length === 0) return;\n\n    if(!searchTerm) {\n      this._optionsFiltered = [];\n      if(!this._searchTerm) this._optionsFiltered = this._options.slice(0);\n      searchTerm = this._searchTerm;\n      options = this._options.slice(0);\n    }\n\n    let found = -1;\n    options.forEach((opt, index) => {\n      this.settings.filter.fields.forEach(field => {\n        let optTerm = opt[field];\n        found = optTerm.search(new RegExp(searchTerm, 'i'));\n        let similar = similarity.compareTwoStrings(optTerm, searchTerm);\n        if((found >= 0 || similar >= this.settings.matchRating) && this._optionsFiltered.indexOf(opt) < 0) {\n          opt.match = similar;\n          this._optionsFiltered.push(opt);\n        }\n      });\n\n      if(opt[this.settings.field] && opt[this.settings.field].length) {\n        found = this.filterOptions(searchTerm, opt[this.settings.field]);\n      }\n    });\n    this._optionsFiltered.sort((a, b) => {\n      return b.match - a.match;\n    });\n    return found;\n  }\n\n  /**\n   * Change the selected value based on if the up/down arrow key is typed\n   * @param {number} direction - The keycode of the key selected\n   */\n  arrowOption(direction: number) {\n    this.filterOn = false;\n    if(!this._selected) this._selected = this._optionsFiltered[0];\n    else {\n      // Do for loop so that we can break out of it.\n      for(let index = 0; index < this._optionsFiltered.length; index++) {\n        let opt = this._optionsFiltered[index];\n        let moveSelected = 1;\n        if(direction === KEY_CODE.UP_ARROW) moveSelected = -1;\n        if(opt === this._selected && this._optionsFiltered[(index + moveSelected)]) {\n          this._selected = this._optionsFiltered[(index + moveSelected)];\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Emit the action selected to the parent component\n   * @param action\n   */\n  selectAction(action: NgBootstrapNestedSelectAction) {\n    this.actionSelected.emit(action);\n  }\n\n  /**\n   * Display the keyboard input filter\n   */\n  showFilter() {\n    this._optionsFiltered = this._options.slice(0);\n    this.filterOn = true;\n    this._searchTerm = '';\n    setTimeout(() => {\n      this.filterInputRef.nativeElement.focus();\n      this.nestedDropRef.open();\n    }, 100);\n  }\n\n  /**\n   * Hide the keyboard input filter\n   */\n  hideFilter() {\n    this.filterOn = false;\n  }\n\n  /**\n   * Set the local this._options array\n   * @param {array} options - Array of objects or values.\n   */\n  setOptions(options: Array<any>) {\n    this._options = [];\n    options.forEach(opt => {\n      if(typeof opt === 'object') { // \"options\" is an array of objects\n        let objCopy = {...opt};\n        objCopy.selected = false;\n        this._options.push(objCopy);\n      } else { // \"options\" is an array of values\n        this._options.push({\n          name: opt,\n          selected: false\n        });\n      }\n      this._optionsFiltered = this._options.slice(0);\n    });\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {NgbDropdownModule, NgbPopoverModule} from '@ng-bootstrap/ng-bootstrap';\nimport {NgBootstrapNestedSelectComponent} from './ng-bootstrap-nested-select.component';\n\n@NgModule({\n  declarations: [NgBootstrapNestedSelectComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    NgbPopoverModule,\n    NgbDropdownModule,\n    NgbPopoverModule\n  ],\n  exports: [NgBootstrapNestedSelectComponent]\n})\nexport class NgBootstrapNestedSelectModule { }\n"]}